/**
 */
package projekt.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import projekt.util.ProjektAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ProjektItemProviderAdapterFactory extends ProjektAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProjektItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Html} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HtmlItemProvider htmlItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Html}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHtmlAdapter() {
		if (htmlItemProvider == null) {
			htmlItemProvider = new HtmlItemProvider(this);
		}

		return htmlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Head} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeadItemProvider headItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Head}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeadAdapter() {
		if (headItemProvider == null) {
			headItemProvider = new HeadItemProvider(this);
		}

		return headItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Meta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaItemProvider metaItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Meta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetaAdapter() {
		if (metaItemProvider == null) {
			metaItemProvider = new MetaItemProvider(this);
		}

		return metaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Title} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TitleItemProvider titleItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Title}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTitleAdapter() {
		if (titleItemProvider == null) {
			titleItemProvider = new TitleItemProvider(this);
		}

		return titleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Base} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BaseItemProvider baseItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Base}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBaseAdapter() {
		if (baseItemProvider == null) {
			baseItemProvider = new BaseItemProvider(this);
		}

		return baseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Style} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StyleItemProvider styleItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Style}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStyleAdapter() {
		if (styleItemProvider == null) {
			styleItemProvider = new StyleItemProvider(this);
		}

		return styleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Body} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BodyItemProvider bodyItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Body}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBodyAdapter() {
		if (bodyItemProvider == null) {
			bodyItemProvider = new BodyItemProvider(this);
		}

		return bodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Heading} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeadingItemProvider headingItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Heading}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeadingAdapter() {
		if (headingItemProvider == null) {
			headingItemProvider = new HeadingItemProvider(this);
		}

		return headingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.BodyElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BodyElementItemProvider bodyElementItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.BodyElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBodyElementAdapter() {
		if (bodyElementItemProvider == null) {
			bodyElementItemProvider = new BodyElementItemProvider(this);
		}

		return bodyElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Paragraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParagraphItemProvider paragraphItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Paragraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParagraphAdapter() {
		if (paragraphItemProvider == null) {
			paragraphItemProvider = new ParagraphItemProvider(this);
		}

		return paragraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Div} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DivItemProvider divItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Div}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDivAdapter() {
		if (divItemProvider == null) {
			divItemProvider = new DivItemProvider(this);
		}

		return divItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Span} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpanItemProvider spanItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Span}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpanAdapter() {
		if (spanItemProvider == null) {
			spanItemProvider = new SpanItemProvider(this);
		}

		return spanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.ListItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemItemProvider listItemItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.ListItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListItemAdapter() {
		if (listItemItemProvider == null) {
			listItemItemProvider = new ListItemItemProvider(this);
		}

		return listItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.UnorderedList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnorderedListItemProvider unorderedListItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.UnorderedList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnorderedListAdapter() {
		if (unorderedListItemProvider == null) {
			unorderedListItemProvider = new UnorderedListItemProvider(this);
		}

		return unorderedListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.OrderedList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderedListItemProvider orderedListItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.OrderedList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderedListAdapter() {
		if (orderedListItemProvider == null) {
			orderedListItemProvider = new OrderedListItemProvider(this);
		}

		return orderedListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.HyperLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HyperLinkItemProvider hyperLinkItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.HyperLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHyperLinkAdapter() {
		if (hyperLinkItemProvider == null) {
			hyperLinkItemProvider = new HyperLinkItemProvider(this);
		}

		return hyperLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.BoldText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoldTextItemProvider boldTextItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.BoldText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoldTextAdapter() {
		if (boldTextItemProvider == null) {
			boldTextItemProvider = new BoldTextItemProvider(this);
		}

		return boldTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.ItalicText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItalicTextItemProvider italicTextItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.ItalicText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItalicTextAdapter() {
		if (italicTextItemProvider == null) {
			italicTextItemProvider = new ItalicTextItemProvider(this);
		}

		return italicTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.UnderlineText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnderlineTextItemProvider underlineTextItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.UnderlineText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnderlineTextAdapter() {
		if (underlineTextItemProvider == null) {
			underlineTextItemProvider = new UnderlineTextItemProvider(this);
		}

		return underlineTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.LineBreak} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LineBreakItemProvider lineBreakItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.LineBreak}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLineBreakAdapter() {
		if (lineBreakItemProvider == null) {
			lineBreakItemProvider = new LineBreakItemProvider(this);
		}

		return lineBreakItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Code} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeItemProvider codeItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Code}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeAdapter() {
		if (codeItemProvider == null) {
			codeItemProvider = new CodeItemProvider(this);
		}

		return codeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.PlainText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainTextItemProvider plainTextItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.PlainText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainTextAdapter() {
		if (plainTextItemProvider == null) {
			plainTextItemProvider = new PlainTextItemProvider(this);
		}

		return plainTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Footer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FooterItemProvider footerItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Footer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFooterAdapter() {
		if (footerItemProvider == null) {
			footerItemProvider = new FooterItemProvider(this);
		}

		return footerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Header} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderItemProvider headerItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Header}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderAdapter() {
		if (headerItemProvider == null) {
			headerItemProvider = new HeaderItemProvider(this);
		}

		return headerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.FormLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormLabelItemProvider formLabelItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.FormLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormLabelAdapter() {
		if (formLabelItemProvider == null) {
			formLabelItemProvider = new FormLabelItemProvider(this);
		}

		return formLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.FormField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormFieldItemProvider formFieldItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.FormField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormFieldAdapter() {
		if (formFieldItemProvider == null) {
			formFieldItemProvider = new FormFieldItemProvider(this);
		}

		return formFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.FormButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormButtonItemProvider formButtonItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.FormButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormButtonAdapter() {
		if (formButtonItemProvider == null) {
			formButtonItemProvider = new FormButtonItemProvider(this);
		}

		return formButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.FormCheckBoxRadio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormCheckBoxRadioItemProvider formCheckBoxRadioItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.FormCheckBoxRadio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormCheckBoxRadioAdapter() {
		if (formCheckBoxRadioItemProvider == null) {
			formCheckBoxRadioItemProvider = new FormCheckBoxRadioItemProvider(this);
		}

		return formCheckBoxRadioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.TableRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableRowItemProvider tableRowItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.TableRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableRowAdapter() {
		if (tableRowItemProvider == null) {
			tableRowItemProvider = new TableRowItemProvider(this);
		}

		return tableRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link projekt.TableCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableCellItemProvider tableCellItemProvider;

	/**
	 * This creates an adapter for a {@link projekt.TableCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableCellAdapter() {
		if (tableCellItemProvider == null) {
			tableCellItemProvider = new TableCellItemProvider(this);
		}

		return tableCellItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (htmlItemProvider != null)
			htmlItemProvider.dispose();
		if (headItemProvider != null)
			headItemProvider.dispose();
		if (metaItemProvider != null)
			metaItemProvider.dispose();
		if (titleItemProvider != null)
			titleItemProvider.dispose();
		if (baseItemProvider != null)
			baseItemProvider.dispose();
		if (linkItemProvider != null)
			linkItemProvider.dispose();
		if (styleItemProvider != null)
			styleItemProvider.dispose();
		if (bodyItemProvider != null)
			bodyItemProvider.dispose();
		if (headingItemProvider != null)
			headingItemProvider.dispose();
		if (bodyElementItemProvider != null)
			bodyElementItemProvider.dispose();
		if (paragraphItemProvider != null)
			paragraphItemProvider.dispose();
		if (divItemProvider != null)
			divItemProvider.dispose();
		if (spanItemProvider != null)
			spanItemProvider.dispose();
		if (listItemItemProvider != null)
			listItemItemProvider.dispose();
		if (unorderedListItemProvider != null)
			unorderedListItemProvider.dispose();
		if (orderedListItemProvider != null)
			orderedListItemProvider.dispose();
		if (hyperLinkItemProvider != null)
			hyperLinkItemProvider.dispose();
		if (imageItemProvider != null)
			imageItemProvider.dispose();
		if (boldTextItemProvider != null)
			boldTextItemProvider.dispose();
		if (italicTextItemProvider != null)
			italicTextItemProvider.dispose();
		if (underlineTextItemProvider != null)
			underlineTextItemProvider.dispose();
		if (lineBreakItemProvider != null)
			lineBreakItemProvider.dispose();
		if (codeItemProvider != null)
			codeItemProvider.dispose();
		if (plainTextItemProvider != null)
			plainTextItemProvider.dispose();
		if (formItemProvider != null)
			formItemProvider.dispose();
		if (footerItemProvider != null)
			footerItemProvider.dispose();
		if (headerItemProvider != null)
			headerItemProvider.dispose();
		if (formLabelItemProvider != null)
			formLabelItemProvider.dispose();
		if (formFieldItemProvider != null)
			formFieldItemProvider.dispose();
		if (formButtonItemProvider != null)
			formButtonItemProvider.dispose();
		if (formCheckBoxRadioItemProvider != null)
			formCheckBoxRadioItemProvider.dispose();
		if (tableItemProvider != null)
			tableItemProvider.dispose();
		if (tableRowItemProvider != null)
			tableRowItemProvider.dispose();
		if (tableCellItemProvider != null)
			tableCellItemProvider.dispose();
	}

}
